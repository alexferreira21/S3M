<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" height="100%" width="100%" xmlns:mygoogle="mygoogle.*" xmlns:view="view.*" xmlns:component="component.*" xmlns:local="*">
	
	<fx:Metadata>
		[Event(name="voltarEvent", type="flash.events.Event")]
	</fx:Metadata>
	
	
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.overlays.PolylineOptions;
			import com.google.maps.services.Directions;
			import com.google.maps.services.DirectionsEvent;
			import com.google.maps.styles.StrokeStyle;
			
			import controller.EstradaController;
			
			import entity.Estrada;
			import entity.FluxoAlternativo;
			import entity.Segmento;
			import entity.UF;
			
			import events.CoordenadaEvent;
			import events.FluxoAlternativoEvent;
			import events.SegmentoEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.INavigatorContent;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import mygoogle.MarkerPortal;
			import mygoogle.events.MapaEvent;
			import mygoogle.events.MarkerPortalEvent;
			
			import util.AlertUtil;
			import util.TipoFluxoAlternativoEnum;
			
			private var rota:Directions;
			private var optionsDefault:PolylineOptions = new PolylineOptions({ strokeStyle: new StrokeStyle({color: 0x000000, thickness: 4, alpha: 1})});
			
			[Bindable]
			private var estradaEmEdicao: Estrada;
			
			[Bindable]
			private var estradaController: EstradaController = new EstradaController();
			
			private var isEdicaoFluxoAlternativo: Boolean = false;
			
			protected function mapaProntoHandler(event:MapaEvent):void
			{
				for each (var markerPortalItem: MarkerPortal in mapa.markers)
				{
					markerPortalItem.addEventListener(MarkerPortalEvent.PORTAL_CLICK,selecionarMarkerPortal);
				}	
				
				dgEstradas.addEventListener("editarEstrada",editarEstrada);
				dgEstradas.addEventListener("removerEstrada",confirmacaoRemoverEstrada);
				
				dgFluxosAlternativos.addEventListener("removerFluxoAlternativo",confirmacaoRemoverFluxoAlternativo);
				
			}
			
			private function confirmacaoRemoverEstrada(event: Event):void
			{
				
				AlertUtil.criarJanelaConfirmacao("Tem certeza de que deseja remover esta estrada","Remover Estrada",this,removerEstrada);
			}
			
			private function confirmacaoRemoverFluxoAlternativo(event: Event):void
			{
				
				AlertUtil.criarJanelaConfirmacao("Tem certeza de que deseja remover este Fluxo Alternativo?","Remover Fluxo Alternativo",this,removerFluxoAlternativo);
			}
			
			private function removerFluxoAlternativo(event:CloseEvent):void
			{
				if (event.detail==Alert.NO)
				{
					return;
				}	
				
				var fluxoAlternativo: FluxoAlternativo= FluxoAlternativo(dgFluxosAlternativos.selectedItem);
				if(isNaN(fluxoAlternativo.idFluxoAlternativo))
				{
					Alert.show("Este Fluxo Alternativo ainda não foi salvo, cancele a edição para removê-lo.");
					return;
				}
				estradaController.removerFluxoAlternativo(fluxoAlternativo,removerFluxoAlternativoSucesso,removerFluxoAlternativoFalha);
			}
			
			private function removerFluxoAlternativoSucesso(event: ResultEvent):void
			{
				for each (var fluxoAlternativoItem: FluxoAlternativo in estradaEmEdicao.fluxosAlternativos)
				{
					if(fluxoAlternativoItem.idFluxoAlternativo == FluxoAlternativo(event.result).idFluxoAlternativo)
					{
						var index: Number = estradaEmEdicao.fluxosAlternativos.getItemIndex(fluxoAlternativoItem);
						estradaEmEdicao.fluxosAlternativos.removeItemAt(index);
					}
					
				}
				mapa.atualizarMapa();
			}
			
			private function removerFluxoAlternativoFalha(event: FaultEvent):void
			{
				
				Alert.show(event.fault.message);
			}
			
			private function removerEstrada(event:CloseEvent):void
			{
				if (event.detail==Alert.NO)
				{
					return;
				}	
				
				var estradaSelecionada:Estrada = Estrada(dgEstradas.selectedItem);
				estradaController.removerEstrada(estradaSelecionada,removerEstradaSucesso,removerEstradaFalha);
			}
			
			
			private function removerEstradaSucesso(event: ResultEvent):void
			{
				mapa.atualizarMapa();
			}
			
			private function removerEstradaFalha(event: FaultEvent):void
			{
				
				Alert.show(event.fault.message);
			}
			
			
			public function selecionarMarkerPortal(event: MarkerPortalEvent):void
			{
				if(isEdicaoFluxoAlternativo)
				{
					edicaoFluxoAlternativo.selecionarMarkerPortal(event);
				}
				else
				{
					edicaoSegmento.selecionarMarkerPortal(event);
				}
			} 
			
			protected function adionarSegmento(event: SegmentoEvent):void
			{
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName('edicaoEstrada'));
				
				estradaEmEdicao.segmentos.addItem(event.segmento);
				
				atualizarEstados();
				
				rota = new Directions();
				rota.addEventListener(DirectionsEvent.DIRECTIONS_SUCCESS,criarPolyline);
				rota.addEventListener(DirectionsEvent.DIRECTIONS_FAILURE,falhaRota);	
				
				var waypoints: ArrayCollection = new ArrayCollection();
				for each (var segmentoItem: Segmento in estradaEmEdicao.segmentos)
				{
					waypoints.addItem(segmentoItem.portalOrigem.latLng);
					waypoints.addItem(segmentoItem.portalDestino.latLng);
				}
				
				rota.loadFromWaypoints(waypoints.toArray());
				
			} 
			
			private function criarPolyline(event: DirectionsEvent):void
			{
				if(estradaEmEdicao.polyline != null)
				{
					mapa.map.removeOverlay(estradaEmEdicao.polyline);
				}
				
				estradaEmEdicao.corEstrada = Number(optionsDefault.strokeStyle.color);
				estradaEmEdicao.polylineData = event.directions.encodedPolylineData;
				//estradaEmEdicao.setPolylineOptions(optionsDefault);
				
				mapa.map.addOverlay(estradaEmEdicao.polyline);
			}
			
			private function atualizarEstados():void
			{
				var encontrou: Boolean = false;
				
				for each (var segmentoItem: Segmento in estradaEmEdicao.segmentos)
				{
					var ufs: ArrayCollection = new ArrayCollection();
					ufs.addItemAt(segmentoItem.portalOrigem.municipio.uf,0);
					ufs.addItemAt(segmentoItem.portalDestino.municipio.uf,1);
					
					if(estradaEmEdicao.ufs.length == 0)
					{
						estradaEmEdicao.ufs.addItem(segmentoItem.portalOrigem.municipio.uf);
					}
					
					var i:int;
					for(i=0; i<2 ; i++)
					{
						for each(var ufItem:UF in estradaEmEdicao.ufs)
						{
							var ufComparada: UF = UF(ufs.getItemAt(i));
							if(ufItem.idUF != ufComparada.idUF)
							{
								estradaEmEdicao.ufs.addItem(ufComparada);
								break;
							}
						}
					}
					
				}
				//lbEstados.text = estradaEmEdicao.ufs.toString();
			}
			
			protected function falhaRota(event:DirectionsEvent):void{
				Alert.show("Não foi possível desemhar estrada. Houve um erro na comunicação com os servidores Google.")
				trace("falha"); 	
			}
			
			protected function voltarParaExibicao_Handler():void
			{
				isEdicaoFluxoAlternativo = false;
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName("edicaoEstrada"));
			}
			
			
			protected function novoSegmento():void
			{
				if((tiNomeEstrada.text == null || tiNomeEstrada.text == "") && isNaN(estradaEmEdicao.idEstrada))
				{
					Alert.show("Você deve preencher o nome da estrada.");
					return;
				}
				
				if(estradaEmEdicao.nome == "" || estradaEmEdicao.nome == null){
					estradaEmEdicao.nome = tiNomeEstrada.text;
				}

				edicaoSegmento.novoSegmento(estradaEmEdicao);
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName("adicionarSegmentos")); 
			}
			
			protected function salvarEstrada():void
			{
				estradaEmEdicao.setPolylineOptions(estradaEmEdicao.polyline.getOptions());
				estradaController.salvarEstrada(estradaEmEdicao);
				finalizarEdicao();
			}
			
			protected function mudarCorEstrada(event:ColorPickerEvent):void
			{
				mapa.map.removeOverlay(estradaEmEdicao.polyline);
				
				var strokeStyle: StrokeStyle = new StrokeStyle();
				strokeStyle.color = colorPicker.selectedColor;
				strokeStyle.thickness = 4;
				strokeStyle.alpha = 1;
				
				
				var polylineOptions: PolylineOptions = new PolylineOptions();
				polylineOptions.strokeStyle = strokeStyle;
				optionsDefault.strokeStyle=strokeStyle;
				
				estradaEmEdicao.polyline.setOptions(polylineOptions);
				
				mapa.map.addOverlay(estradaEmEdicao.polyline);
				
			}
			
			protected function cancelarEdicaoEstrada(event:CloseEvent):void
			{
				if (event.detail==Alert.NO)
				{
					return;
				}
				
				if(estradaEmEdicao.polyline != null)
				{
					mapa.map.removeOverlay(estradaEmEdicao.polyline);
				}
				
				
				if(!isNaN(estradaEmEdicao.idEstrada))
				{
					//buscar denovo estrada no banco, para apagar segmentos adicionados antes de cancelar.
					estradaEmEdicao.setPolylineOptions(Estrada.criarOptionsViaCor(estradaEmEdicao.corEstrada)); //mudar para o método novo e testar
					mapa.map.addOverlay(estradaEmEdicao.polyline);
				}
				
				
				finalizarEdicao();
			}
			
			private function finalizarEdicao():void
			{
				estradaEmEdicao = null;
				tiNomeEstrada.text = "";
				optionsDefault = new PolylineOptions({ strokeStyle: new StrokeStyle({color: 0x000000, thickness: 4, alpha: 1})});
				colorPicker.selectedColor = 0;
				
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName("exibicaoEstradas"));
			}
			
			protected function novaEstrada(event:MouseEvent):void
			{
				estradaEmEdicao = new Estrada();
				estradaEmEdicao.segmentos = new ArrayCollection();
				estradaEmEdicao.ufs = new ArrayCollection();
				
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName("criacaoEstrada"));
				tiNomeEstrada.setFocus();
			}
			
			
			protected function editarEstrada(event:Event):void
			{
				estradaEmEdicao = Estrada(dgEstradas.selectedItem);
				
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName('edicaoEstrada'));
				colorPicker.selectedColor = estradaEmEdicao.corEstrada;
				optionsDefault = estradaEmEdicao.polyline.getOptions();
			}
			
			
			protected function centralizarMapa(event:CoordenadaEvent):void
			{
				mapa.map.setCenter(event.latLng);				
			}
			
			protected function centralizarNoInicioDaEstrada(event:ListEvent):void
			{
				var estradaSelecionada: Estrada = Estrada(ArrayCollection(dgEstradas.dataProvider).getItemAt(event.rowIndex));
				var primeiroPortalLatLng: LatLng = Segmento(estradaSelecionada.segmentos.getItemAt(0)).portalOrigem.latLng;				
					
				mapa.map.setCenter(primeiroPortalLatLng);
			}
			
			protected function novoFluxoAlternativo():void
			{
				isEdicaoFluxoAlternativo = true;
				
				edicaoFluxoAlternativo.novoFluxoAlternativo(estradaEmEdicao);
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName("adicionarFluxosAlternativos"));
			}
			
			protected function adicionarFluxoAlternativo(event:FluxoAlternativoEvent):void
			{
				
				vsEstrada.selectedChild = INavigatorContent(vsEstrada.getChildByName('edicaoEstrada'));
				estradaEmEdicao.fluxosAlternativos.addItem(event.fluxoAlternativo);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VDividedBox height="100%" width="100%">
		<mygoogle:Mapa id="mapa"  height="80%" width="100%" mapaPronto="mapaProntoHandler(event)"/>
		
		<mx:ViewStack id="vsEstrada" height="20%" width="100%" creationPolicy="all" resizeEffect="Resize">
			
			<s:NavigatorContent id="exibicaoEstradas">
				<s:HGroup height="100%" width="100%">
					
					<component:LocalizarCoordenada novaCoordenada="centralizarMapa(event)"/>
					<s:Spacer width="200"/> 
					
					<mx:DataGrid id="dgEstradas" dataProvider="{estradaController.estradas}" height="100%"
								 doubleClickEnabled="true" itemDoubleClick="centralizarNoInicioDaEstrada(event)">
						<mx:columns>
							<mx:DataGridColumn dataField="nome" headerText="Nome"/> 
							<mx:DataGridColumn dataField="segmentos.length" headerText="Numero de Segmentos"/> 
							<mx:DataGridColumn dataField="ufs" headerText="Estados"/> 
							<mx:DataGridColumn headerText="Ações" width="80">
								<mx:itemRenderer>
									<fx:Component>
										<mx:HBox paddingLeft="5">
											<s:Image   source="@Embed('assets/editIcon.png')" click="dispatchEvent(new Event('editarEstrada', true))"/>
											<s:Image   source="@Embed('assets/excluirIcon.png')"  click="dispatchEvent(new Event('removerEstrada', true))"/>
										</mx:HBox>
									</fx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
						</mx:columns>
						
					</mx:DataGrid>
					
					<s:VGroup paddingLeft="15">
						<s:Button id="btNovaEstrada"  label="Nova Estrada"  click="novaEstrada(event)"/>
						<s:Button id="btVoltar" label="Voltar"  click="{dispatchEvent(new Event('voltarEvent',true))}"/>
					</s:VGroup>
				</s:HGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="criacaoEstrada">
				<s:VGroup height="100%" width="100%">
					<s:FormItem label="Nome da Estrada">
						<component:SubmitTextInput id="tiNomeEstrada" submitFunction="novoSegmento"/>
					</s:FormItem>
					<s:HGroup>
						<s:Button id="btAdicionarSegmentos" label="Adicionar Segmentos" click="novoSegmento()"/>
						<s:Button id="btVoltarParaExibicao" label="Voltar" click="voltarParaExibicao_Handler()"/>			
					</s:HGroup>
				</s:VGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="edicaoEstrada">
				<s:HGroup height="100%" width="100%">
					<s:VGroup>
						<s:HGroup>
							<s:FormItem label="Nome da Estrada">
								<s:Label id="lbNomeEstrada" text="{estradaEmEdicao.nome}"/>
							</s:FormItem>
							
							<s:FormItem label="Estados">
								<s:Label id="lbEstados" text="{estradaEmEdicao.ufs.toString()}"/>
							</s:FormItem>
						</s:HGroup>
						<s:FormItem label="Cor">
							<mx:ColorPicker id="colorPicker" change="mudarCorEstrada(event)"/>
						</s:FormItem>
						<s:HGroup>
							<s:Button  label="Salvar"  click="salvarEstrada()"/>
							<s:Button  label="Cancelar"  click="{AlertUtil.criarJanelaConfirmacao('Tem certeza de que deseja cancelar a edição','Cancelar Edição',this,cancelarEdicaoEstrada)}"/>
						</s:HGroup>
					</s:VGroup>	
					
					
					<mx:DataGrid id="dgSegmentos" dataProvider="{estradaEmEdicao.segmentos}" height="100%">
						<mx:columns>
							<mx:DataGridColumn dataField="nome" headerText="Nome"/>
							<mx:DataGridColumn dataField="kmInicial" headerText="KM Inicial"/>
							<mx:DataGridColumn dataField="portalOrigem.nome" headerText="Portal Origem"/>
							<mx:DataGridColumn dataField="kmFinal" headerText="KM Final"/>
							<mx:DataGridColumn dataField="portalDestino.nome" headerText="Portal Destino"/>
						</mx:columns>
					</mx:DataGrid>
					
					<s:Button label="Adicionar Segmento" click="novoSegmento()" width="138" height="70"/>
					
					<s:Spacer width="100"/>
					
					<mx:DataGrid id="dgFluxosAlternativos" dataProvider="{estradaEmEdicao.fluxosAlternativos}" height="100%">
						<mx:columns>
							<mx:DataGridColumn dataField="portal.nome" headerText="Portal"/>
							<mx:DataGridColumn dataField="tipo" headerText="Tipo" labelFunction="TipoFluxoAlternativoEnum.fluxoAlternativoDataGridLabelFunction"/>
							<mx:DataGridColumn headerText="Ações" width="80">
								<mx:itemRenderer>
									<fx:Component>
										<mx:HBox paddingLeft="5">
											<s:Image   source="@Embed('assets/excluirIcon.png')"  click="dispatchEvent(new Event('removerFluxoAlternativo', true))"/>
										</mx:HBox>
									</fx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
						</mx:columns>
					</mx:DataGrid>

					<s:Button id="btAdicionarFluxoAlternativo" label="AdicioanarFluxoAlternativo" click="novoFluxoAlternativo()"/>
					
				</s:HGroup>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="adicionarSegmentos" >
				<component:EditarSegmentos id="edicaoSegmento" voltar="voltarParaExibicao_Handler()" adicionarSegmento="adionarSegmento(event)" height="100%" width="100%"/>
			</s:NavigatorContent>
			
			<s:NavigatorContent id="adicionarFluxosAlternativos">
				<component:AdicionarFluxoAlternativo id="edicaoFluxoAlternativo" estradaEmEdicao="{estradaEmEdicao}" voltar="voltarParaExibicao_Handler()" 
													 adicionarFluxoAlternativo="adicionarFluxoAlternativo(event)" height="100%" width="100%"/>
			</s:NavigatorContent>
			
			
		</mx:ViewStack>
		
	</mx:VDividedBox>
	
	
</s:Group>
